https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html

Além do método sort() que vimos neste capítulo, a classe Collections também possui muitos outros métodos interessantes. Vamos dar uma olhada em alguns:

Collections.reverse()
O método reverse() serve para inverter a ordem de uma lista. As vezes precisamos imprimir uma lista de nomes do último para o primeiro, ou uma lista de ids do maior para o menor e é nestas horas que utilizamos o reverse para inverter a ordem natural da lista para nós.

Collections.shuffle()
O método shuffle() serve para embaralhar a ordem de uma lista. Por exemplo em um caso de um sistema de sorteio, em que precisamos de uma ordem aleatória na nossa lista, utilizamos o método shuffle para embaralhá-la.

Collections.singletonList()
O método singletonList() nos devolve uma lista imutável que contêm um único elemento especificado. Ele é útil quando precisamos passar um único elemento para uma API que só aceita uma Collections daquele elemento.

Collections.nCopies()
O método nCopies() nos retorna uma lista imutável com a quantidade escolhida de um determinado elemento. Se temos uma lista específica e precisamos obter uma outra lista imutável , contendo diversas cópias de um destes objetos, utilizamos o método nCopies(). O bom deste método é que mesmo que nós solicitemos uma lista com um número grande, como 10000 objetos, ele na verdade se referencia a apenas um, ocupando assim um pequeno espaço.

Este método também é utilizado para inicializar Listas recém criadas com Null, já que ele pode rapidamente criar diversos objetos, deste modo:

List<Type> list = new ArrayList<Type>(Collections.nCopies(1000, (Type)null));

Estes são apenas alguns exemplos dos diversos métodos da classe Collections.

Sets se parecem com uma lista mas não, eles criam uma lista e carregam o metodo de adicionar(add), porém não contém um index, para exibir essa lista de forma completa você vai precisar de um foreach.

ele garante que não haverá objetos iguais.


            hierarquia das interfaces
                     Iterable
                        |
                    Collection
                    |        |
                   SET      LIST

Collection -> Uma collection é todo mundo que implementa uma interface do collection

Collection -> List, Set

HashSet - HashSet é um conjunto por isso não tem uma ordem

LinkedList -> lista vazia e cada novo item adicionado ele coloca em ordem aleatorio assim não definindo ordem e não carregando tanto o sistema, ele utiliza o comparable.

LinkedHashSet -> nos dá a performance de um HashSet mas com acesso previsível e ordenado.

ArrayList -> Lista com ordem fixa


TreeSet -> ele guarda tudo ordenado na ordem natural dos objetos, na ordem do comparable. ele precisa do comparable

Iterator era usado antigamente para mostrar  dados de uma Collection.

Vector - A classe Vector possui as mesmas características que um ArrayList, com a diferença de que o primeiro possui acesso sincronizado e o segundo não.